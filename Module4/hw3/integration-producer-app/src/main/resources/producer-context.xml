<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.1.xsd
                        http://camel.apache.org/schema/spring 
                        http://camel.apache.org/schema/spring/camel-spring.xsd">

    <context:property-placeholder location="classpath:producer.properties" />

    <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${app.activemq.broker.url}" />
    </bean>

    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>

    <camel:camelContext id="camelContext">
        
        <camel:propertyPlaceholder id="properties" location="producer.properties" />

        <camel:dataFormats>
            <camel:json id="jacksonJsonMarshaller" library="Jackson" unmarshalTypeName="com.epam.cdp.hnyp.architecture.integration.producer.ArifmeticCommand" />
        </camel:dataFormats>
        
        <camel:route>
            <camel:from uri="timer://generateTimer?period={{app.messages.sendingInterval}}" />
            
            <camel:to uri="bean:arifmeticCommandGenerator?method=generate" />
            
            <!-- set operation to header to able to use after message body transformation -->
            <camel:setHeader headerName="ARIFMETIC_OPERATION">
                <camel:simple>${in.body.operation}</camel:simple>
            </camel:setHeader>
            
            <camel:marshal ref="jacksonJsonMarshaller" />
            
            <!-- message routing depending on ARIFMETIC_OPERATION message header  -->
            <camel:choice>
                <camel:when>
                    <camel:simple>${in.header.ARIFMETIC_OPERATION} == 'add'</camel:simple>
                    <camel:to uri="activemq:queue:{{app.message.queue.operation.add}}" pattern="InOnly" />
                </camel:when>
                <camel:when>
                    <camel:simple>${in.header.ARIFMETIC_OPERATION} == 'sub'</camel:simple>
                    <camel:to uri="activemq:queue:{{app.message.queue.operation.sub}}" pattern="InOnly" />
                </camel:when>
                <camel:when>
                    <camel:simple>${in.header.ARIFMETIC_OPERATION} == 'div'</camel:simple>
                    <camel:to uri="activemq:queue:{{app.message.queue.operation.div}}" pattern="InOnly" />
                </camel:when>
                <camel:when>
                    <camel:simple>${in.header.ARIFMETIC_OPERATION} == 'mul'</camel:simple>
                    <camel:to uri="activemq:queue:{{app.message.queue.operation.mul}}" pattern="InOnly" />
                </camel:when>
                <!-- queue mull also responsible for other operations execution -->
                <camel:otherwise>
                    <camel:to uri="activemq:queue:{{app.message.queue.operation.mul}}" pattern="InOnly" />
                </camel:otherwise>
            </camel:choice>
        </camel:route> 
        
        <!-- listening for error messages -->
        <camel:route>
            <camel:from uri="activemq:queue:{{app.message.queue.error}}" />
            <camel:to uri="stream:out" />
        </camel:route>
        
    </camel:camelContext>
    
    <!-- bean that randomly generates command objects -->
    <bean id="arifmeticCommandGenerator" class="com.epam.cdp.hnyp.architecture.integration.producer.ArifmeticCommandGenerator">
        <constructor-arg>
            <list>
                <value>add</value>
                <value>sub</value>
                <value>div</value>
                <value>mul</value>
                <value>sqrt</value>
            </list>
        </constructor-arg>
    </bean>

</beans>
